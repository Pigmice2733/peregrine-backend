diff --git a/internal/server/matches.go b/internal/server/matches.go
index 9a155ec..d240222 100644
--- a/internal/server/matches.go
+++ b/internal/server/matches.go
@@ -26,8 +26,7 @@ func (s *Server) matchesHandler() http.HandlerFunc {
 	return func(w http.ResponseWriter, r *http.Request) {
 		eventKey := mux.Vars(r)["eventKey"]
 
-		// teamFilter will be empty if not specified
-		teamFilter := r.URL.Query().Get("team")
+		teams := r.URL.Query()["team"]
 
 		// Get new match data from TBA
 		if err := s.updateMatches(eventKey); err != nil {
@@ -41,7 +40,7 @@ func (s *Server) matchesHandler() http.HandlerFunc {
 			return
 		}
 
-		fullMatches, err := s.store.GetEventMatches(eventKey)
+		fullMatches, err := s.store.GetTeamMatches(eventKey, teams)
 		if err != nil {
 			ihttp.Error(w, http.StatusInternalServerError)
 			go s.logger.WithError(err).Error("retrieving event matches")
@@ -50,13 +49,6 @@ func (s *Server) matchesHandler() http.HandlerFunc {
 
 		matches := []match{}
 		for _, fullMatch := range fullMatches {
-			// If teamFilter is specified, filter matches
-			if teamFilter != "" {
-				if !allianceContainsTeam(fullMatch.RedAlliance, teamFilter) && !allianceContainsTeam(fullMatch.BlueAlliance, teamFilter) {
-					continue
-				}
-			}
-
 			// Match keys are stored in TBA format, with a leading event key
 			// prefix that which needs to be removed before use.
 			key := strings.TrimPrefix(fullMatch.Key, eventKey+"_")
diff --git a/internal/store/matches.go b/internal/store/matches.go
index 633c988..e463401 100644
--- a/internal/store/matches.go
+++ b/internal/store/matches.go
@@ -2,6 +2,8 @@ package store
 
 import (
 	"database/sql"
+
+	"github.com/lib/pq"
 )
 
 // Match holds information about an FRC match at a specific event
@@ -59,7 +61,7 @@ func (s *Service) GetEventMatches(eventKey string) ([]Match, error) {
 }
 
 // GetTeamMatches returns all matches from a specific event that include a specific team.
-func (s *Service) GetTeamMatches(eventKey string, teamKey string) ([]Match, error) {
+func (s *Service) GetTeamMatches(eventKey string, teamKeys []string) ([]Match, error) {
 	matches := []Match{}
 	err := s.db.Select(&matches, `
 		SELECT
@@ -67,7 +69,7 @@ func (s *Service) GetTeamMatches(eventKey string, teamKey string) ([]Match, erro
 		FROM matches
 		INNER JOIN alliances
 			ON matches.key = alliances.match_key
-		WHERE matches.event_key = $1 AND $2 = ANY(alliances.team_keys)`, eventKey, teamKey)
+		WHERE matches.event_key = $1 AND $2 && alliances.team_keys`, eventKey, pq.Array(teamKeys))
 	if err != nil {
 		return nil, err
 	}
