# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2
jobs:
  test:
    docker:
      - image: circleci/golang:1.10
    working_directory: /go/src/github.com/Pigmice2733/peregrine-backend
    steps:
      - checkout
      - run: dep ensure
      - run: go get -v -t -d ./...
      - run: go test -v ./...

  deploy_edge:
    docker:
      - image: circleci/golang:1.10
    working_directory: /go/src/github.com/Pigmice2733/peregrine-backend
    steps:
      - checkout
      - run: dep ensure
      - run: go get -v -t -d ./...
      - run: mkdir -p /tmp/builds
      - run: go build -o /tmp/builds/peregrine cmd/peregrine/main.go
      - run: go build -o /tmp/builds/migrate cmd/migrate/main.go
      - run: mkdir -p /tmp/deploy/bin
      - run: mkdir -p /tmp/deploy/migrations
      - run: cp -r /tmp/builds/* /tmp/deploy/bin
      - run: cp -r cmd/migrate/migrations/* /tmp/deploy/migrations
      - run: tar czvf deploy.tgz -C /tmp/ deploy
      - run: scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null deploy.tgz $EDGE_SSH_USER@$EDGE_SSH_HOST:/root
      - run: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -t $EDGE_SSH_USER@$EDGE_SSH_HOST "./deploy.sh"
      
  deploy_prod:
    docker:
      - image: circleci/golang:1.10
    working_directory: /go/src/github.com/Pigmice2733/peregrine-backend
    steps:
      - checkout
      - run: dep ensure
      - run: go get -v -t -d ./...
      - run: mkdir -p /tmp/builds
      - run: go build -o /tmp/builds/peregrine cmd/peregrine/main.go
      - run: go build -o /tmp/builds/migrate cmd/migrate/main.go
      - run: mkdir -p /tmp/deploy/bin
      - run: mkdir -p /tmp/deploy/migrations
      - run: cp -r /tmp/builds/* /tmp/deploy/bin
      - run: cp -r cmd/migrate/migrations/* /tmp/deploy/migrations
      - run: tar czvf deploy.tgz -C /tmp/ deploy
      - run: scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null deploy.tgz $PROD_SSH_USER@$PROD_SSH_HOST:/root
      - run: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -t $PROD_SSH_USER@$PROD_SSH_HOST "./deploy.sh"

workflows:
  version: 2
  test_n_deploy:
    jobs:
      - test
      - deploy_prod:
          requires:
            - test
          filters:
            branches:
              only: master
      - deploy_edge:
          requires:
            - test
          filters:
            branches:
              only: develop
              
